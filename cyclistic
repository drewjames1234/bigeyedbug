---Below are examples of some SQL code I used when preparing, cleaning and analysing data as part of my Capstone project, Cyclistic cycles---

Preparing / cleaning data

---Inspecting columns----

SELECT DISTINCT *
FROM `capstonecycles.Cyclisticdata1.Cyclistictable1`

----Define CTE for cleaning null values and ensuring valid coordinates---
sql


WITH null_station_names_cleaned AS (
   SELECT *
   FROM `capstonecycles.Cyclisticdata1.Cyclistictable1` cd
   LEFT JOIN null_station_names nsn
   ON cd.ride_id = nsn.bad_ride_id
   WHERE nsn.bad_ride_id IS NULL AND
      cd.start_lat IS NOT NULL AND
      cd.start_lng IS NOT NULL AND
      cd.end_lat IS NOT NULL AND
      cd.end_lng IS NOT NULL
);
----Define CTE for transforming data (e.g., renaming rideable types).

-WITH aggregated_tripdata AS (
   SELECT ride_id,
      REPLACE(rideable_type, 'docked_bike', 'classic_bike') AS ride_type,
      -- Other transformations...
   FROM null_station_names_cleaned 
)


---- Define null_station_names_cleaned CTE----
WITH null_station_names_cleaned AS (
   SELECT *
   FROM `capstonecycles.Cyclisticdata1.Cyclistictable1` cd
   WHERE cd.start_lat IS NOT NULL AND

-- Define null_station_names_cleaned CTE
WITH null_station_names_cleaned AS (
   SELECT *
   FROM `capstonecycles.Cyclisticdata1.Cyclistictable1` cd
   WHERE cd.start_lat IS NOT NULL AND
         cd.start_lng IS NOT NULL AND
         cd.end_lat IS NOT NULL AND
         cd.end_lng IS NOT NULL
)

-- Use null_station_names_cleaned CTE in the same WITH clause
, aggregated_tripdata AS (
   SELECT ride_id,
      REPLACE(rideable_type, 'docked_bike', 'classic_bike') AS ride_type,
      started_at,
      ended_at,
      IFNULL(TRIM(REPLACE(start_station_name, '(Temp)', '')), 'On Bike Lock') AS starting_station_name,
      IFNULL(TRIM(REPLACE(end_station_name, '(Temp)', '')), 'On Bike Lock') AS ending_station_name,
      -- Additional columns...
   FROM null_station_names_cleaned 
)

-- Use aggregated_tripdata CTE
SELECT *
FROM aggregated_tripdata;

SELECT DISTINCT *
FROM `capstonecycles.Cyclisticdata1.Cyclistictable1`


UPDATE null_station_names_cleaned
SET
  rideable_type = REPLACE(rideable_type, 'docked_bike', 'classic_bike'),
  start_station_name = TRIM(REPLACE(start_station_name, '(Temp)', '')),
  end_station_name = TRIM(REPLACE(end_station_name, '(Temp)', ''))
WHERE
  (ride_id = '16' OR ride_id IS NULL) AND
  start_lat IS NOT NULL AND
  start_lng IS NOT NULL AND
  end_lat IS NOT NULL AND
  end_lng IS NOT NULL;

ANALYSE 

----analyse transformed data and apply additional queries---

SELECT *
FROM aggregated_tripdata;

GROUP BY LENGTH(ride_id)---exluding trips less than a minute

SELECT
  CEIL(TIMESTAMP_DIFF(ended_at, started_at, SECOND) / 60) AS rounded_trip_length_minutes,
  COUNT(*) AS trip_count
FROM `capstonecycles.Cyclisticdata1.Cyclistictable1`
GROUP BY rounded_trip_length_minutes
HAVING rounded_trip_length_minutes > 0; -- Exclude trips less than a minute

---revised the above to sum in hours and minutes---

SELECT
  rounded_trip_length_minutes,
  CONCAT(
    LPAD(CAST(FLOOR(CAST(rounded_trip_length_minutes AS INT64) / 60) AS STRING), 2, '0'), ':',
    LPAD(CAST(MOD(CAST(rounded_trip_length_minutes AS INT64), 60) AS STRING), 2, '0')
  ) AS trip_length_formatted,
  COUNT(*) AS trip_count
FROM (
  SELECT
    ride_id,
    CEIL(TIMESTAMP_DIFF(ended_at, started_at, SECOND) / 60) AS rounded_trip_length_minutes
  FROM `capstonecycles.Cyclisticdata1.Cyclistictable1`
) AS subquery
WHERE rounded_trip_length_minutes > 0
GROUP BY rounded_trip_length_minutes;

------calculate av trip length-----
SELECT
   AVG(trip_length) AS av_trip_length
FROM `capstonecycles.Cyclisticdata1.Cyclistictable1`


---create means of calculating trip lengths----

TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS trip_length_seconds

AVG(trip_length_seconds) AS avg_trip_length_seconds

AVG(trip_length_seconds) / 60 AS avg_trip_length_minutes


SELECT
  ride_id,
  started_at,
  ended_at,
  TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS trip_length_seconds,
  TIMESTAMP_DIFF(ended_at, started_at, MINUTE) AS trip_length_minutes,
  TIMESTAMP_DIFF(ended_at, started_at, HOUR) AS trip_length_hours
FROM

SELECT
  AVG(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)) AS avg_trip_length_minutes
FROM
  `capstonecycles.Cyclisticdata1.Cyclistictable1`;


----Day of the week column----
SELECT
   ride_id,
   -- Other columns...
   CASE
      WHEN EXTRACT(DAYOFWEEK FROM started_at) = 1 THEN 'Sun'
      WHEN EXTRACT(DAYOFWEEK FROM started_at) = 2 THEN 'Mon'
      -- Add other days as needed
      ELSE 'Sat'
   END AS day_of_week
FROM null_station_names_cleaned;


---group by casual or member-----
SELECT
   member_casual,
   COUNT(*) AS member_casual_count
FROM `capstonecycles.Cyclisticdata1.Cyclistictable1`
GROUP BY member_casual


----Day of the week---for Member and Casual

SELECT
  EXTRACT(DAYOFWEEK FROM started_at) AS day_of_week,
  COUNT(*) AS total_rides,
  COUNT(CASE WHEN member_casual = 'member' THEN 1 END) AS member_rides,
  COUNT(CASE WHEN member_casual = 'casual' THEN 1 END) AS casual_rides,
  AVG(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)) AS avg_trip_length_minutes
FROM `capstonecycles.Cyclisticdata1.Cyclistictable1`
WHERE start_lat IS NOT NULL
  AND start_lng IS NOT NULL
  AND end_lat IS NOT NULL
  AND end_lng IS NOT NULL
GROUP BY day_of_week;


----seasonal classification----
SELECT
   ride_id,
   -- Other columns...
   CASE
      WHEN EXTRACT(MONTH FROM started_at) IN (12, 1, 2) THEN 'Winter'
      WHEN EXTRACT(MONTH FROM started_at) IN (3, 4, 5) THEN 'Spring'
      WHEN EXTRACT(MONTH FROM started_at) IN (6, 7, 8) THEN 'Summer'
      WHEN EXTRACT(MONTH FROM started_at) IN (9, 10, 11) THEN 'Autumn'
      ELSE 'Unknown'  -- Handle cases where the month is not in the expected range
   END AS season
FROM null_station_names_cleaned;

---combine start station lat and name in same query for the purpose of understanding popular locations ----
SELECT
  start_lat,
  start_station_name,
  COUNT(*) AS start_count
FROM
  `capstonecycles.Cyclisticdata1.Cyclistictable1`
GROUP BY
  start_lat, start_station_name
ORDER BY
  start_count DESC;

SELECT
 end_lat,
end_station_name,
  COUNT(*) AS start_count
FROM
  `capstonecycles.Cyclisticdata1.Cyclistictable1`
GROUP BY
  start_lat, start_station_name
ORDER BY
  start_count DESC;

---determine popular start / end points in descending order----

SELECT
  start_station_name,
  start_lat,
  start_lng,
  COUNT(*) AS start_count,
  end_station_name,
  end_lat,
  end_lng,
  COUNT(*) AS end_count
FROM
  `capstonecycles.Cyclisticdata1.Cyclistictable1`
GROUP BY
  start_station_name,
  start_lat,
  start_lng,
  end_station_name,
  end_lat,
  end_lng
ORDER BY
  start_count


----filter by days of week and season-----
ay_season_counts AS (
  SELECT
    CASE
      WHEN EXTRACT(DAYOFWEEK FROM started_at) = 1 THEN 'Sun'
      WHEN EXTRACT(DAYOFWEEK FROM started_at) = 2 THEN 'Mon'
      -- Add other days as needed
      ELSE 'Sat'
    END AS day_of_week,
    CASE
      WHEN EXTRACT(MONTH FROM started_at) IN (12, 1, 2) THEN 'Winter'
      WHEN EXTRACT(MONTH FROM started_at) IN (3, 4, 5) THEN 'Spring'
      WHEN EXTRACT(MONTH FROM started_at) IN (6, 7, 8) THEN 'Summer'
      WHEN EXTRACT(MONTH FROM started_at) IN (9, 10, 11) THEN 'Autumn'
      ELSE 'Unknown'
    END AS season,
    member_casual,
    COUNT(*) AS ride_count
  FROM aggregated_tripdata
  GROUP BY day_of_week, season, member_casual
)
---days of the week & season count by members & casual------------
SELECT
  day_of_week,
  season,
  member_casual,
  ride_count,
  ride_count / SUM(ride_count) OVER (PARTITION BY day_of_week, season) AS proportion
FROM day_season_counts;
